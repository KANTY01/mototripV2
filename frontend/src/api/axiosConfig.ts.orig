import axios from 'axios'
import { store } from '../store/store'
import { logout, setCredentials } from '../store/slices/authSlice'
import { authApi } from './auth'

// DEV_MODE: Bypass all API authentication
const DEV_MODE = true

const BASE_URL = import.meta.env.VITE_API_URL || '/api'

const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
})

api.interceptors.request.use(
  (config) => {
    // In dev mode, add a dummy token
    if (DEV_MODE) {
      config.headers.Authorization = 'Bearer dev-token'
      return config
    }

    const token = store.getState().auth.token
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    console.error('Request error:', error)
    return Promise.reject(error)
  }
)

let isRefreshing = false
let failedQueue: { resolve: Function; reject: Function }[] = []

const processQueue = (error: any = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error)
    } else {
      prom.resolve()
    }
  })
  failedQueue = []
}

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    // In dev mode, convert 401/403 responses to success
    if (DEV_MODE && (error.response?.status === 401 || error.response?.status === 403)) {
      console.log('DEV MODE: Bypassing authentication error', error.response.status)
      // Return mock data for development
      return Promise.resolve({
        data: {
          success: true,
          data: {
            message: 'DEV MODE: Authentication bypassed',
            // Add any necessary mock data here
            user: store.getState().auth.user
          }
        }
      })
    }

    const originalRequest = error.config
    
    if (error.response?.status === 401 && error.response?.data?.code === 'TOKEN_EXPIRED' && !originalRequest._retry) {
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject })
        }).then(() => api(originalRequest))
      }

      originalRequest._retry = true
      isRefreshing = true

      try {
        const response = await authApi.refreshToken()
        store.dispatch(setCredentials(response))
        api.defaults.headers.common['Authorization'] = `Bearer ${response.token}`
        processQueue()
        return api(originalRequest)
      } catch (refreshError) {
        processQueue(refreshError)
        if (!DEV_MODE) {
          store.dispatch(logout())
        }
        return Promise.reject(refreshError)
      } finally {
        isRefreshing = false
      }
    }
    
    if (error.response?.status === 401 && !DEV_MODE) {
      store.dispatch(logout())
      return Promise.reject({ message: 'Unauthorized' })
    }
    
    if (error.response && error.response.data && typeof error.response.data.message === 'string') {
      return Promise.reject({ message: error.response.data.message })
    }
    console.error('Response error:', error.response?.data || error.message)
    return Promise.reject(error)
  }
)

export default api
